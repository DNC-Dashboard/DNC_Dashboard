"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.1.2.
Docs:
- Settings: https://docs.djangoproject.com/en/4.1/ref/settings/
- Deployment checklist: https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/
"""

# -------------------- STANDARD IMPORTS --------------------
import os
import random
import string
from pathlib import Path
from dotenv import load_dotenv
from str2bool import str2bool

# -------------------- ENV & BASE_DIR ----------------------
# Load .env from project root (same folder as manage.py)
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(BASE_DIR / ".env")

# -------------------- GA4 CONFIG (OPTIONAL) ---------------
GA4_PROPERTY_ID = os.getenv("GA4_PROPERTY_ID")  # e.g., 506017731
GOOGLE_APPLICATION_CREDENTIALS = os.getenv("GOOGLE_APPLICATION_CREDENTIALS")  # absolute path to JSON

# -------------------- CORE SETTINGS -----------------------
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "Super_Secr3t_9999")

# Enable/Disable DEBUG Mode
DEBUG = str2bool(os.environ.get("DEBUG"))

# Hosts
ALLOWED_HOSTS = ["*"]

# CSRF for local/dev
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:8000",
    "http://localhost:5085",
    "http://127.0.0.1:8000",
    "http://127.0.0.1:5085",
]

# Render.com
RENDER_EXTERNAL_HOSTNAME = os.environ.get("RENDER_EXTERNAL_HOSTNAME")
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# -------------------- APPS --------------------------------
INSTALLED_APPS = [
    # third-party
    "rest_framework",
    "rest_framework.authtoken",

    # your new app
    "apps.tasks",

    # UI theme
    "jazzmin",
    "admin_adminlte.apps.AdminAdminlteConfig",

    # Django core
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # Project apps
    "apps.pages",
    "apps.dyn_dt",
    "apps.dyn_api",
    "apps.charts",
    "apps.analytics",
]

# -------------------- MIDDLEWARE --------------------------
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

# -------------------- TEMPLATES ---------------------------
HOME_TEMPLATES = os.path.join(BASE_DIR, "templates")

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [HOME_TEMPLATES],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

# -------------------- DATABASE ----------------------------
DB_ENGINE   = os.getenv("DB_ENGINE")        # e.g., "postgresql"
DB_USERNAME = os.getenv("DB_USERNAME")
DB_PASS     = os.getenv("DB_PASS")
DB_HOST     = os.getenv("DB_HOST")
DB_PORT     = os.getenv("DB_PORT")
DB_NAME     = os.getenv("DB_NAME")
DB_SSLMODE  = os.getenv("DB_SSLMODE")       # e.g., "require"

if DB_ENGINE and DB_NAME and DB_USERNAME:
    OPTIONS = {}
    # Add SSL for Postgres on RDS
    if DB_ENGINE == "postgresql" and DB_SSLMODE:
        OPTIONS["sslmode"] = DB_SSLMODE

    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends." + DB_ENGINE,
            "NAME": DB_NAME,
            "USER": DB_USERNAME,
            "PASSWORD": DB_PASS,
            "HOST": DB_HOST,
            "PORT": DB_PORT,
            "OPTIONS": OPTIONS,
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": "db.sqlite3",
        }
    }

# -------------------- AUTH / PASSWORD ---------------------
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# -------------------- I18N --------------------------------
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# -------------------- STATIC FILES ------------------------
STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"),)

# If you decide to enable hashed staticfiles in prod:
# if not DEBUG:
#     STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# -------------------- MISC --------------------------------
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
LOGIN_REDIRECT_URL = "/"
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

# ------------- DYNAMIC_DATATB / DYNAMIC_API ---------------
DYNAMIC_DATATB = {
    "product": "apps.pages.models.Product",
}
DYNAMIC_API = {
    "product": "apps.pages.models.Product",
}

# -------------------- DRF ---------------------------------
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.TokenAuthentication",
    ],
}

# -------------------- GA4 SANITY (DEV ONLY) ---------------
if not GA4_PROPERTY_ID:
    print("[GA4] Missing GA4_PROPERTY_ID in .env")

from pathlib import Path as _P  # keep local to avoid polluting namespace
if not GOOGLE_APPLICATION_CREDENTIALS or not _P(GOOGLE_APPLICATION_CREDENTIALS).exists():
    print(f"[GA4] Key file not found or invalid path: {GOOGLE_APPLICATION_CREDENTIALS!r}")
